import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Specify the encoding when reading the CSV file
pf = pd.read_csv('movies.csv', encoding='latin-1') # Or 'ISO-8859-1', or any other suspected encoding.
movies = pd.DataFrame(pf)


# Simulate a user profile (preferences)
user_profile = {
    'preferred_genres': ['Sci-Fi', 'Adventure'],
    'preferred_actors': ['Leonardo DiCaprio', 'Keanu Reeves'],
    'liked_keywords': ['space', 'dream', 'simulation']
}

# **Check the available columns in the DataFrame and adjust accordingly**
# **For example, replace ['genre', 'actors', 'description'] with the actual column names**
# print(movies.columns)  # Uncomment to print the column names
# Assuming the actual column names are 'genres', 'stars', and 'plot'
def create_feature(row):
    return f"{row['movieId']} {row['title']} {row['genres']}" # **Corrected column names**

movies['features'] = movies.apply(create_feature, axis=1)

# Include user profile as a pseudo-document
user_input = ' '.join(user_profile['preferred_genres'] + user_profile['preferred_actors'] + user_profile['liked_keywords'])

# TF-IDF vectorization
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['features'].tolist() + [user_input])

# Compute cosine similarity (last row is the user)
cosine_sim = cosine_similarity(tfidf_matrix[-1], tfidf_matrix[:-1])

# Get top 3 recommendations
top_indices = cosine_sim[0].argsort()[::-1][:3]
recommended_movies = movies.iloc[top_indices]

# Show results
print("ðŸŽ¬ Top Movie Recommendations:")
for i, row in recommended_movies.iterrows():
    print(f"{row['title']} - Genre: {row['movieId']} {row['title']} {row['genres']}") # **Corrected column names**
